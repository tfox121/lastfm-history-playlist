import React, { useState } from 'react';
import Head from 'next/head';
import Image from 'next/image';
import { useQuery } from '@tanstack/react-query';
import Typography from '@mui/material/Typography';
import Backdrop from '@mui/material/Backdrop';
import Container from '@mui/material/Container';
import TextField from '@mui/material/TextField';
import Box from '@mui/material/Box';
import IconButton from '@mui/material/IconButton';
import InputAdornment from '@mui/material/InputAdornment';
import SearchIcon from '@mui/icons-material/Search';
import Grid from '@mui/material/Grid';
import CircularProgress from '@mui/material/CircularProgress';
import { format } from 'date-fns';

import { monthlyTopTracks, getLastfmUser } from '@/src/lib/lastfm';

export default function Home() {
  const [userName, setUserName] = useState('');
  const {
    isLoading: isLoadingUser,
    error: errorUser,
    data: user,
  } = useQuery({
    queryKey: [('userData', userName)],
    queryFn: () => getLastfmUser(userName),
  });

  const {
    isLoading: isLoadingTopTrackMonths,
    error: errorTopTrackMonths,
    data: topTrackMonths,
  } = useQuery({
    queryKey: ['topTrackData', user?.name],
    queryFn: () => monthlyTopTracks(user),
    useErrorBoundary: true,
  });

  if (errorUser || errorTopTrackMonths) {
    return <div>An error occurred, please reload.</div>;
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Container maxWidth="md">
          <Box my={2}>
            <Typography variant="h3" component="h1" gutterBottom>
              Top Track Time Warp!
            </Typography>
            <form
              onSubmit={(evt) => {
                evt.preventDefault();
                setUserName(evt.target[0].value);
              }}
            >
              <TextField
                fullWidth
                sx={{
                  my: 2,
                }}
                // value={userName}
                // onChange={(evt) => setUserName(evt.target.value)}
                label="Last.fm username"
                InputProps={{
                  endAdornment: (
                    <InputAdornment position="end">
                      <IconButton
                        type="submit"
                        aria-label="toggle password visibility"
                        edge="end"
                      >
                        <SearchIcon />
                      </IconButton>
                    </InputAdornment>
                  ),
                }}
              />
            </form>
            <Grid container>
              {isLoadingUser || isLoadingTopTrackMonths ? (
                <div>
                  <Backdrop
                    sx={{
                      color: '#fff',
                      zIndex: (theme) => theme.zIndex.drawer + 1,
                    }}
                    open
                  >
                    <CircularProgress color="inherit" />
                  </Backdrop>
                </div>
              ) : (
                topTrackMonths?.map((week) => {
                  const dateFromUnix = new Date(
                    Number(week['@attr'].from) * 1000,
                  );
                  const formattedDate = format(dateFromUnix, 'MMMM Y');

                  const topTrack = week.track[0];
                  if (!topTrack) return null;
                  // let image = topTrack?.image[2]['#text'];

                  // const query = `artist:"${topTrack.artist['#text']}" AND "${topTrack.name}"`;

                  // if (topTrack.artist.mbid) {
                  //   query.concat(` AND arid:${topTrack.artist.mbid}`);
                  // }

                  // const searchParams = new URLSearchParams({
                  //   query,
                  //   limit: 1,
                  //   fmt: 'json',
                  // });

                  // axios
                  //   .get(
                  //     `https://musicbrainz.org/ws/2/recording?${searchParams.toString()}`,
                  //   )
                  //   .then(({ data }) =>
                  //     console.log(topTrack.artist['#text'], topTrack.name, data),
                  //   );
                  return (
                    <React.Fragment key={week['@attr'].from}>
                      {/* eslint-disable-next-line react/no-array-index-key */}
                      <Grid item xs={1}>
                        <Image
                          alt="track image"
                          src={week.track[0].image[2]['#text']}
                          width={50}
                          height={50}
                        />
                      </Grid>
                      <Grid item xs={11}>
                        <Box height="100%" display="flex" alignItems="center">
                          <Box>
                            <Typography variant="subtitle2" color="primary">
                              {formattedDate}
                            </Typography>
                            <Typography variant="p">
                              {week.track[0].name} -{' '}
                              {week.track[0].artist['#text']}
                            </Typography>
                          </Box>
                        </Box>
                      </Grid>
                    </React.Fragment>
                  );
                })
              )}
            </Grid>
          </Box>
        </Container>
      </main>
    </>
  );
}
